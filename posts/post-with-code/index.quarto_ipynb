{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Robust SQL calls from Python\"\n",
        "author: \"Dekel Wainer\"\n",
        "date: \"2025-03-16\"\n",
        "categories: [SQL, reliability]\n",
        "image: \"image.png\"\n",
        "---\n",
        "\n",
        "\n",
        "Making Python code interact with an SQL database is straightforward.\n",
        "Imagine you're using Azure SQL and want to insert data into 2 tables. You might generate this code:\n",
        "\n",
        "\n",
        "```{Python}\n",
        "import os\n",
        "import pyodbc\n",
        "\n",
        "conn_str = os.getenv(\"sql_connection_string\")  # secret connection string\n",
        "\n",
        "with pyodbc.connect(conn_str) as conn:\n",
        "    with conn.cursor() as cursor:\n",
        "\n",
        "        insert_query = \"\"\"\n",
        "            INSERT INTO some_table (field1, field2, field3)  -- fieldN are the actual fields in the database\n",
        "            VALUES (?, ?, ?)\n",
        "        \"\"\"\n",
        "        cursor.execute(insert_query, (field1, field2, field3))  # fieldN here are the variables in Python\n",
        "        conn.commit()\n",
        "\n",
        "        insert_query = \"\"\"\n",
        "            INSERT INTO another_table (field4, field5)\n",
        "            VALUES (?, ?)\n",
        "        \"\"\"\n",
        "        cursor.execute(insert_query, (field4, field5)) \n",
        "        conn.commit()\n",
        "```\n",
        "\n",
        "\n",
        "A vibe-coding developer might stop here, assured by the LLM that this is good implementation because:\n",
        "    - The connection string isn't being exposed.\n",
        "    - Placeholders (the '?') are being used, which protects against SQL injection.\n",
        "    - A context manager is used (the 'with' statements), which automatically closes the connection to the SQL database.\n",
        "\n",
        "But it's not good implementation, because there's no error handling.\n",
        "This means any communication or schema error will result in unexpected behavior in the program.\n",
        "Even worse, if an error occurs after the first query is committed but the second isn't, your database only contains partial data.\n",
        "\n",
        "So a better approach is to add explicit error handling, and commit data after all queries have succeeded.\n",
        "\n",
        "\n",
        "```{Python}\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "But what if you don't have all the information needed to commit concurrently in a single script?\n",
        "For instance, "
      ],
      "id": "78b4b589"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}